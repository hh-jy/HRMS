<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.Emp_SalaryMapper">
  <resultMap id="BaseResultMap" type="com.bean.Emp_Salary">
    <id column="sal_emp_id" jdbcType="INTEGER" property="salEmpId" />
    <result column="basic_salary" jdbcType="DOUBLE" property="basicSalary" />
    <result column="reward_sal" jdbcType="DOUBLE" property="rewardSal" />
    <result column="punish_sal" jdbcType="DOUBLE" property="punishSal" />
    <result column="emp_salary" jdbcType="DOUBLE" property="empSalary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sal_emp_id, basic_salary, reward_sal, punish_sal, emp_salary
  </sql>
  <select id="selectByExample" parameterType="com.bean.Emp_SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bean.Emp_SalaryExample">
    delete from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bean.Emp_Salary">
    insert into emp_salary (sal_emp_id, basic_salary, reward_sal, 
      punish_sal, emp_salary)
    values (#{salEmpId,jdbcType=INTEGER}, #{basicSalary,jdbcType=DOUBLE}, #{rewardSal,jdbcType=DOUBLE}, 
      #{punishSal,jdbcType=DOUBLE}, #{empSalary,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.bean.Emp_Salary">
    insert into emp_salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        sal_emp_id,
      </if>
      <if test="basicSalary != null">
        basic_salary,
      </if>
      <if test="rewardSal != null">
        reward_sal,
      </if>
      <if test="punishSal != null">
        punish_sal,
      </if>
      <if test="empSalary != null">
        emp_salary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        #{salEmpId,jdbcType=INTEGER},
      </if>
      <if test="basicSalary != null">
        #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        #{empSalary,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bean.Emp_SalaryExample" resultType="java.lang.Long">
    select count(*) from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update emp_salary
    <set>
      <if test="record.salEmpId != null">
        sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      </if>
      <if test="record.basicSalary != null">
        basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.rewardSal != null">
        reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="record.punishSal != null">
        punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      </if>
      <if test="record.empSalary != null">
        emp_salary = #{record.empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update emp_salary
    set sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      emp_salary = #{record.empSalary,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bean.Emp_Salary">
    update emp_salary
    <set>
      <if test="basicSalary != null">
        basic_salary = #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        reward_sal = #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        punish_sal = #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        emp_salary = #{empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bean.Emp_Salary">
    update emp_salary
    set basic_salary = #{basicSalary,jdbcType=DOUBLE},
      reward_sal = #{rewardSal,jdbcType=DOUBLE},
      punish_sal = #{punishSal,jdbcType=DOUBLE},
      emp_salary = #{empSalary,jdbcType=DOUBLE}
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.bean.Emp_Salary">
    <id column="sal_emp_id" jdbcType="INTEGER" property="salEmpId" />
    <result column="basic_salary" jdbcType="DOUBLE" property="basicSalary" />
    <result column="reward_sal" jdbcType="DOUBLE" property="rewardSal" />
    <result column="punish_sal" jdbcType="DOUBLE" property="punishSal" />
    <result column="emp_salary" jdbcType="DOUBLE" property="empSalary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sal_emp_id, basic_salary, reward_sal, punish_sal, emp_salary
  </sql>
  <select id="selectByExample" parameterType="com.bean.Emp_SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bean.Emp_SalaryExample">
    delete from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bean.Emp_Salary">
    insert into emp_salary (sal_emp_id, basic_salary, reward_sal, 
      punish_sal, emp_salary)
    values (#{salEmpId,jdbcType=INTEGER}, #{basicSalary,jdbcType=DOUBLE}, #{rewardSal,jdbcType=DOUBLE}, 
      #{punishSal,jdbcType=DOUBLE}, #{empSalary,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.bean.Emp_Salary">
    insert into emp_salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        sal_emp_id,
      </if>
      <if test="basicSalary != null">
        basic_salary,
      </if>
      <if test="rewardSal != null">
        reward_sal,
      </if>
      <if test="punishSal != null">
        punish_sal,
      </if>
      <if test="empSalary != null">
        emp_salary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        #{salEmpId,jdbcType=INTEGER},
      </if>
      <if test="basicSalary != null">
        #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        #{empSalary,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bean.Emp_SalaryExample" resultType="java.lang.Long">
    select count(*) from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update emp_salary
    <set>
      <if test="record.salEmpId != null">
        sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      </if>
      <if test="record.basicSalary != null">
        basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.rewardSal != null">
        reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="record.punishSal != null">
        punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      </if>
      <if test="record.empSalary != null">
        emp_salary = #{record.empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update emp_salary
    set sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      emp_salary = #{record.empSalary,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bean.Emp_Salary">
    update emp_salary
    <set>
      <if test="basicSalary != null">
        basic_salary = #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        reward_sal = #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        punish_sal = #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        emp_salary = #{empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bean.Emp_Salary">
    update emp_salary
    set basic_salary = #{basicSalary,jdbcType=DOUBLE},
      reward_sal = #{rewardSal,jdbcType=DOUBLE},
      punish_sal = #{punishSal,jdbcType=DOUBLE},
      emp_salary = #{empSalary,jdbcType=DOUBLE}
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="com.bean.Emp_Salary">
    <id column="sal_emp_id" jdbcType="INTEGER" property="salEmpId" />
    <result column="basic_salary" jdbcType="DOUBLE" property="basicSalary" />
    <result column="reward_sal" jdbcType="DOUBLE" property="rewardSal" />
    <result column="punish_sal" jdbcType="DOUBLE" property="punishSal" />
    <result column="emp_salary" jdbcType="DOUBLE" property="empSalary" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sal_emp_id, basic_salary, reward_sal, punish_sal, emp_salary
  </sql>
  <select id="selectByExample" parameterType="com.bean.Emp_SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from emp_salary
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.bean.Emp_SalaryExample">
    delete from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.bean.Emp_Salary">
    insert into emp_salary (sal_emp_id, basic_salary, reward_sal, 
      punish_sal, emp_salary)
    values (#{salEmpId,jdbcType=INTEGER}, #{basicSalary,jdbcType=DOUBLE}, #{rewardSal,jdbcType=DOUBLE}, 
      #{punishSal,jdbcType=DOUBLE}, #{empSalary,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.bean.Emp_Salary">
    insert into emp_salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        sal_emp_id,
      </if>
      <if test="basicSalary != null">
        basic_salary,
      </if>
      <if test="rewardSal != null">
        reward_sal,
      </if>
      <if test="punishSal != null">
        punish_sal,
      </if>
      <if test="empSalary != null">
        emp_salary,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="salEmpId != null">
        #{salEmpId,jdbcType=INTEGER},
      </if>
      <if test="basicSalary != null">
        #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        #{empSalary,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.bean.Emp_SalaryExample" resultType="java.lang.Long">
    select count(*) from emp_salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update emp_salary
    <set>
      <if test="record.salEmpId != null">
        sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      </if>
      <if test="record.basicSalary != null">
        basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.rewardSal != null">
        reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="record.punishSal != null">
        punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      </if>
      <if test="record.empSalary != null">
        emp_salary = #{record.empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update emp_salary
    set sal_emp_id = #{record.salEmpId,jdbcType=INTEGER},
      basic_salary = #{record.basicSalary,jdbcType=DOUBLE},
      reward_sal = #{record.rewardSal,jdbcType=DOUBLE},
      punish_sal = #{record.punishSal,jdbcType=DOUBLE},
      emp_salary = #{record.empSalary,jdbcType=DOUBLE}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.bean.Emp_Salary">
    update emp_salary
    <set>
      <if test="basicSalary != null">
        basic_salary = #{basicSalary,jdbcType=DOUBLE},
      </if>
      <if test="rewardSal != null">
        reward_sal = #{rewardSal,jdbcType=DOUBLE},
      </if>
      <if test="punishSal != null">
        punish_sal = #{punishSal,jdbcType=DOUBLE},
      </if>
      <if test="empSalary != null">
        emp_salary = #{empSalary,jdbcType=DOUBLE},
      </if>
    </set>
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bean.Emp_Salary">
    update emp_salary
    set basic_salary = #{basicSalary,jdbcType=DOUBLE},
      reward_sal = #{rewardSal,jdbcType=DOUBLE},
      punish_sal = #{punishSal,jdbcType=DOUBLE},
      emp_salary = #{empSalary,jdbcType=DOUBLE}
    where sal_emp_id = #{salEmpId,jdbcType=INTEGER}
  </update>
</mapper>